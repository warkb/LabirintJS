{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"set",
				"setTimeout"
			],
			[
				"sl",
				"sleep"
			],
			[
				"req",
				"requestAnimationFrame"
			],
			[
				"bo",
				"body"
			],
			[
				"wa",
				"waitscreenObject"
			],
			[
				"sto",
				"stopFlag"
			],
			[
				"do",
				"document.getElementById('info').style.height"
			],
			[
				"cur",
				"currentCell"
			],
			[
				"prev",
				"prevHighlatedCell"
			],
			[
				"prv",
				"prevHighlatedCell"
			],
			[
				"und",
				"undefined"
			],
			[
				"hi",
				"highlitedCellColor"
			],
			[
				"cu",
				"currentCell"
			],
			[
				"find",
				"findedPath"
			],
			[
				"finPa",
				"findedPath"
			],
			[
				"fr",
				"frameTime"
			],
			[
				"tim",
				"timer"
			],
			[
				"bu",
				"buttonClass"
			],
			[
				"bors",
				"border-style"
			],
			[
				"st",
				"style\tTag"
			],
			[
				"col",
				"columns"
			],
			[
				"to",
				"top"
			],
			[
				"ta",
				"table-cell"
			],
			[
				"co",
				"counter"
			],
			[
				"pa",
				"parseInt"
			],
			[
				"tr",
				"true"
			],
			[
				"fi",
				"find\t.find()"
			],
			[
				"fun",
				"fun\tFunction"
			],
			[
				"fir",
				"firstTop"
			],
			[
				"pos",
				"position"
			],
			[
				"goB",
				"goButtonClassName"
			],
			[
				"go",
				"goButton"
			],
			[
				"font",
				"font-size"
			],
			[
				"fon",
				"font-family"
			],
			[
				"fons",
				"font-size"
			],
			[
				"di",
				"div\tTag"
			],
			[
				"new",
				"newCell"
			],
			[
				"la",
				"lastCell"
			],
			[
				"move",
				"moves"
			],
			[
				"fin",
				"finding"
			],
			[
				"le",
				"length"
			],
			[
				"po",
				"posibleMoves"
			],
			[
				"dis",
				"distance"
			],
			[
				"las",
				"lastPosibleMoves"
			],
			[
				"texta",
				"text-align"
			],
			[
				"ch",
				"characterCode"
			],
			[
				"con",
				"console.log(\"left"
			],
			[
				"pre",
				"pressed"
			],
			[
				"cha",
				"changeClass"
			],
			[
				"fu",
				"fun\tFunction"
			],
			[
				"not",
				"notActiveCellClassName"
			],
			[
				"ac",
				"activeCellClassName"
			],
			[
				"mou",
				"mousedown\t.mousedown()"
			],
			[
				"fa",
				"false"
			],
			[
				"cs",
				"css"
			],
			[
				"size",
				"sizeWithMargin"
			],
			[
				"ma",
				"margin"
			],
			[
				"cell",
				"cellsArray"
			],
			[
				"firs",
				"firstTop"
			],
			[
				"ce",
				"cellPxSize"
			],
			[
				"va",
				"var"
			],
			[
				"cel",
				"cellsArray"
			],
			[
				"baco",
				"background-color"
			],
			[
				"j",
				"js/"
			],
			[
				"ov",
				"overflow"
			],
			[
				"i",
				"index"
			],
			[
				"mo",
				"months"
			],
			[
				"wid",
				"width"
			],
			[
				"wi",
				"width"
			],
			[
				"li",
				"link\tTag"
			],
			[
				"align-",
				"align-items"
			],
			[
				"f",
				"table-footer-group"
			],
			[
				"ali",
				"align-content"
			],
			[
				"trn",
				"transition"
			],
			[
				"M",
				"Model"
			],
			[
				"C",
				"CharField"
			],
			[
				"for",
				"form〔variable〕"
			],
			[
				"ba",
				"background"
			],
			[
				"fo",
				"form-group"
			],
			[
				"S",
				"Subscriber"
			],
			[
				"cons",
				"console_log"
			],
			[
				"rev",
				"revArr〔variable〕"
			],
			[
				"ra",
				"range"
			],
			[
				"s",
				"sequence"
			],
			[
				"un",
				"undefined\t: object Global"
			],
			[
				"cou",
				"countChar〔function〕"
			],
			[
				"ur",
				"url〔module〕"
			],
			[
				"da",
				"date"
			],
			[
				"ti",
				"timezone〔module〕"
			],
			[
				"no",
				"now"
			],
			[
				"se",
				"self〔argument〕"
			],
			[
				"qu",
				"question"
			],
			[
				"ge",
				"get_object_or_404〔module〕"
			],
			[
				"Q",
				"QuestionAdmin"
			],
			[
				"tes",
				"tests"
			],
			[
				"te",
				"tests"
			],
			[
				"dir",
				"dirlist〔variable〕"
			],
			[
				"get",
				"getTestsFromList〔function〕"
			],
			[
				"str",
				"string〔variable〕"
			],
			[
				"if",
				"if\tIf Condition"
			],
			[
				"res",
				"results"
			],
			[
				"Ht",
				"HttpResponse〔module〕"
			],
			[
				"re",
				"render〔module〕"
			],
			[
				"in",
				"input\tTag"
			],
			[
				"de",
				"detail"
			],
			[
				"Re",
				"RequestContext〔module〕"
			],
			[
				"m",
				"models〔module〕"
			],
			[
				"el",
				"else〔keyword〕"
			],
			[
				"int",
				"interface〔variable〕"
			],
			[
				"wri",
				"write〔function〕"
			],
			[
				"_",
				"_thread"
			],
			[
				"lo",
				"logging〔module〕"
			],
			[
				"vla",
				"vlan〔variable〕"
			],
			[
				"Про",
				"Проверяем"
			],
			[
				"net",
				"networkTable〔variable〕"
			],
			[
				"dy",
				"dynamicIpv6Prim"
			],
			[
				"sy",
				"system〔blob〕"
			],
			[
				"radv",
				"radvdNewConfigStr〔variable〕"
			],
			[
				"sys",
				"system"
			],
			[
				"Inte",
				"InterfacesUp〔module〕"
			],
			[
				"AddV",
				"AddVlanInterface"
			],
			[
				"dh",
				"dhcp_support.pyc"
			],
			[
				"prin",
				"print〔keyword〕"
			],
			[
				"pr",
				"print〔keyword〕"
			],
			[
				"In",
				"InclusionOrderComparison〔module〕"
			],
			[
				"pri",
				"print"
			],
			[
				"ipv6D",
				"ipv6DynAddr2"
			],
			[
				"ipv6d",
				"ipv6DynAddr1"
			]
		]
	},
	"buffers":
	[
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 990,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "style.css",
			"settings":
			{
				"buffer_size": 1158,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "// take from css\nvar findedPath;\nvar margin = 5; // величина зазора между клетками\nvar numberOfCells = 9; // количетво клеток в линии\nvar cellPxSize = 50; // размер клетки в пикселах\nvar sizeWithMargin = cellPxSize + margin;\nvar firstLeft = (document.body.clientWidth - sizeWithMargin * numberOfCells + \n\tmargin) / 2;\nvar firstTop = (document.body.clientHeight - sizeWithMargin * numberOfCells +\n\tmargin) / 2;\n\nvar waitscreenObject = document.getElementById('waitscreen');\n\nvar baseCellColor = \"#54f4f4\";\n\nvar highlitedCellColor = \"rgb(255,219,77)\";\nvar activeCellClassName = \"activeCell\";\nvar notActiveCellClassName = \"notActiveCell\";\n\nvar statusArray = new Array(numberOfCells);\nvar cellsArray = new Array(numberOfCells);\n\nvar finding = false; // флаг который означает, что идет поиск\nvar stopFlag = false; // флаг который означает, что кнопка стоп была нажата\n\nfunction sleep(ms) {\n\tms += new Date().getTime();\n\twhile (new Date() < ms){}\n}\n\nfunction onStop(e) {\n\t// функция, запускаемая по кнопке \"Надоело ждать\"\n\tstopFlag = true;\n}\n\nfunction onEnter(e) {\n\t// действие по нажатию enter\n\tif ((e.key == \"Enter\" || e.key == undefined) && !finding) {\n\t\tfinding = true;\n\t\twaitscreenObject.setAttribute('style', 'top: 0px;');\n\t\trefrashStatusArray();\n\t\tfindedPath = toFindPath();\n\t\tconsole.log(findedPath);\n\t\twaitscreenObject.style.top = (-document.body.clientWidth) + \"px\";\n\t\tif (findedPath.length > 0) \n\t\t\tplayAnimation(findedPath);\n\t}\n\n\tfinding = false;\n};\n\n// добавляем кнопку поиска пути\ngoButton = document.getElementById(\"goButton\");\ngoButton.onclick = onEnter;\n\n// goButton.style.top = firstTop + (numberOfCells - 1) * sizeWithMargin + \"px\";\n// goButton.style.left = firstLeft + (numberOfCells) * sizeWithMargin + 'px';\n\ndocument.getElementById('info').appendChild(goButton);\nfirstTop += 40;//document.getElementById('info').style.height;\n\nvar finalPoint = [0, numberOfCells - 1];\n\n\nfor (var i = 0; i < numberOfCells; i++) {\n\tstatusArray[i] = new Array(numberOfCells);\n\tcellsArray[i] = new Array(numberOfCells);\n}\n\nfor (var i = 0; i < numberOfCells; i++) {\n\tfor (var j = 0; j < numberOfCells; j++) {\n\t\tvar cell = document.createElement(\"div\");\n\t\tcell.className = activeCellClassName;\n\t\tcell.style.top = (firstTop + i * sizeWithMargin) + \"px\";\n\t\tcell.style.left = (firstLeft + j * sizeWithMargin) + \"px\";\n\t\tcellsArray[i][j] = cell;\n\t\tcell.appendChild(document.createTextNode(i + ', ' + j));\n\t\tdocument.body.appendChild(cell);\n\t}\n}\n\n// добавляем смену класса при перетаскивании мышью с зажатой левой кнопкой\nvar pressed = false;\n\ndocument.body.onmousedown = function () {\n\tpressed = true;\n\tevent.preventDefault();\n}\n\ndocument.body.onmouseup = function () {\n\tpressed = false;\n}\n\nfunction refrashStatusArray() {\n\t// обновляет массив статусов согласно текущему массиву клеток\n\tfor (var i = 0; i < numberOfCells; i++) {\n\t\tfor (var j = 0; j < numberOfCells; j++) {\n\t\t\tstatusArray[i][j] = cellsArray[i][j].className == activeCellClassName;\n\t\t}\n\t}\n}\n\nfunction changeClass(event) {\n\t// функция меняет статус ечейки с активной на неактивную\n\tif (event.target.className == notActiveCellClassName) {\n\t\tevent.target.className = activeCellClassName;\n\t}\n\telse {\n\t\tevent.target.className = notActiveCellClassName;\n\t}\n}\n\n\n// далее идут функции, ответственные за поиск пути в лабиринте\n\nvar resultPath = [];\n\nfunction IJnotInResultPath(i, j) {\n\t// возвращает true если точка с координатами i,j не принадлежит пути\n\tfor (var ind in resultPath) {\n\t\tvar element = resultPath[ind];\n\t\tif (element[0] == i && element[1] == j) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction posibleMoves(point) {\n\t// Возвращает список ходов, доступных из данной точки\n\tvar moves = [];\n\tvar i = point[0], j = point[1];\n\tif (i + 1 < numberOfCells && statusArray[i + 1][j] && IJnotInResultPath(i + 1, j)) \n\t\tmoves.push([i + 1, j]);\n\tif (i - 1 >= 0 && numberOfCells && statusArray[i - 1][j] && IJnotInResultPath(i - 1, j))\n\t\tmoves.push([i - 1, j]);\n\tif (j + 1 < numberOfCells && statusArray[i][j + 1] && IJnotInResultPath(i, j + 1))\n\t\tmoves.push([i, j + 1]);\n\tif (j - 1 >= 0 && statusArray[i][j - 1] && IJnotInResultPath(i, j - 1)) \n\t\tmoves.push([i, j - 1]);\n\treturn moves.sort(movesSortsFunction);\n}\n\nfunction toFindPath() {\n\tresultPath = [];\n\tconsole.log('---toFindPath---');\n\t// ищет путь до конечной точки в лабиринте\n\t// возвращает пустой массив в случае, если пути нет\n\tcounter = 0;\n\tvar startPoint = [numberOfCells - 1, 0]\n\tvar pathArray = [{\n\t\t\tpoint: startPoint,\n\t\t\tposibleMoves: posibleMoves(startPoint)\n\t\t}];\n\tresultPath.push(startPoint);\n\treturn recursiveFindPath(pathArray);\n}\n\nfunction recursiveFindPath(pathArray) {\n\tconsole.log('---recursiveFindPath---');\n\tcounter += 1;\n\t// функция рекурсивно ищет путь до нужной точки\n\tif (pathArray.length == 0) {\n\t\t// ходов больше нет\n\t\tconsole.log('ходов больше нет');\n\t\tconsole.log('Counter: ', counter);\n\t\treturn -1;\n\t}\n\n\tif (resultPath.length > 100) {return -1;}\n\tvar lastCell = pathArray.slice(-1)[0];\n\tvar lastPosibleMoves = lastCell.posibleMoves;\n\tif (lastPosibleMoves.length == 0) {\n\t\t// зашли в тупик\n\t\t// делаем шаг назад\n\t\tconsole.log('зашли в тупик');\n\t\tpathArray.pop();\n\t\tresultPath.pop();\n\t\t// $.extend(true, [], pathArray);\n\t\t\n\t\treturn recursiveFindPath($.extend(true, [], pathArray));\n\t}\n\tif (distance(lastCell.point, finalPoint) == 0) {\n\t\t// путь найден! возвращаем путь\n\t\tconsole.log('ура!');\n\t\treturn resultPath;\n\t}\n\n\tvar newPoint = pathArray[pathArray.length - 1].posibleMoves.shift();\n\tpathArray[pathArray.length - 1].posibleMoves;\n\tvar newCell = {\n\t\tpoint: newPoint,\n\t\tposibleMoves: posibleMoves(newPoint)\n\t};\n\tpathArray.push(newCell);\n\tresultPath.push(newPoint);\n\treturn recursiveFindPath($.extend(true, [], pathArray));\n}\n\nfunction movesSortsFunction(a, b) {\n\t// вспомогательная функция для сортировки массива\n\tvar distanceToA = distance(a, finalPoint);\n\tvar distanceToB = distance(b, finalPoint);\n\tif (distanceToA == distanceToB) \n\t\treturn 0;\n\tif (distanceToA < distanceToB) \n\t\treturn 0-1;\n\telse\n\t\treturn 1;\n}\n\nfunction distance(a, b) {\n\t// получает на вход два двумерных массива с точками, \n\t// возвращает дистанцию между точками\n\treturn Math.sqrt(Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2));\n}\n\nfunction playAnimation(path) {\n\t// отображает полученный путь в виде анимации\n\tvar start = Date.now();\n\tvar frameTime = 300; // время, за которое анимация сдвинется на один кадр\n\tvar fullTime = frameTime * (path.length + 1);\n\tvar prevHighlatedCell = undefined;\n\tvar timer = setInterval(function () {\n\t\tvar timePassed = Date.now() - start;\n\t\tvar currentFrame = Math.ceil(timePassed / frameTime);\n\t\tif (prevHighlatedCell) {\n\t\t\tprevHighlatedCell.style.backgroundColor = \"\";\n\t\t}\n\t\tif (currentFrame >= path.length) {\n\t\t\tclearInterval(timer);\n\t\t\treturn;\n\t\t}\n\t\tvar currentCellCoord = path[currentFrame];\n\t\tvar currentCell = cellsArray[currentCellCoord[0]][currentCellCoord[1]];\n\t\tcurrentCell.style.backgroundColor = highlitedCellColor;\n\t\tprevHighlatedCell = currentCell;\n\t});\n}\n\n$(\".activeCell\").mousedown(function(e) {\n\tchangeClass(e);\n\tevent.preventDefault();\n});\n\n$(\".activeCell\").mouseover(function(e) {\n\tif (pressed)\n\t\tchangeClass(e);\n});\n\ndocument.body.onkeypress = onEnter;",
			"file": "script.js",
			"file_size": 8287,
			"file_write_time": 131684226979670657,
			"settings":
			{
				"buffer_size": 7119,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "tmp.html",
			"settings":
			{
				"buffer_size": 481,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "aasteric.py",
			"settings":
			{
				"buffer_size": 10162,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "com",
		"selected_items":
		[
			[
				"com",
				"Git: Commit"
			],
			[
				"ad",
				"Git: Add..."
			],
			[
				"push",
				"Git: Push Current Branch"
			],
			[
				"gitAdd",
				"Git: Add..."
			],
			[
				"init",
				"Git: Init"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"pus",
				"Git: Push"
			],
			[
				"add",
				"Git: Add..."
			],
			[
				"codein",
				"SublimeCodeIntel: Dump Import Directories"
			],
			[
				"code in",
				"SublimeCodeIntel: Enable Live Autocompletion for Current Language"
			],
			[
				"pull",
				"Git: Pull"
			],
			[
				"git add",
				"Git: Add..."
			],
			[
				"com\t",
				"Git: Commit"
			],
			[
				"cha",
				"Git: Change Branch"
			],
			[
				"pu",
				"Git: Pull"
			],
			[
				"a",
				"Git: Add..."
			],
			[
				"push ",
				"Git: Push Current Branch"
			],
			[
				"ch",
				"Git: Change Branch"
			],
			[
				"status",
				"Git: Status"
			],
			[
				"new ",
				"Git: New Branch"
			],
			[
				"current ",
				"Git: Diff Current File"
			],
			[
				"curr",
				"Git: Diff Current File"
			],
			[
				"branch",
				"GitGutter: Compare Against Branch"
			],
			[
				"bra",
				"GitGutter: Compare Against Branch"
			],
			[
				"stat",
				"Indexing Status"
			],
			[
				"pul",
				"Git: Pull"
			],
			[
				"log",
				"Git: Log Current File"
			],
			[
				"sta",
				"Git: Status"
			],
			[
				"ad.",
				"Git: Add..."
			],
			[
				"co",
				"Git: Commit"
			],
			[
				"git add.",
				"Git: Add..."
			],
			[
				"git ad",
				"Git: Add..."
			],
			[
				"git lo",
				"Git: Log All"
			],
			[
				"mer",
				"Git: Merge Branch"
			],
			[
				"git com\t",
				"Git: Commit"
			],
			[
				"add..",
				"Git: Add..."
			],
			[
				"change",
				"Git: Change Branch"
			],
			[
				"git che",
				"Git: Change Branch"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git stat",
				"Git: Status"
			],
			[
				"git add..",
				"Git: Add..."
			],
			[
				"git add ",
				"Git: Add..."
			],
			[
				"git cha",
				"Git: Change Branch"
			],
			[
				"git pu",
				"Git: Pull"
			],
			[
				"git di",
				"Git: Diff All Files"
			],
			[
				"git co",
				"Git: Commit"
			],
			[
				"git bra",
				"Git: Change Branch"
			],
			[
				"git:  ",
				"Git: Status"
			],
			[
				"git:  che",
				"Git: Change Branch"
			],
			[
				"git:  s",
				"Git: Status"
			],
			[
				"git:  com",
				"Git: Commit"
			],
			[
				"git:  push",
				"Git: Push Current Branch"
			],
			[
				"git:  pus",
				"Git: Push"
			],
			[
				"git:  add",
				"Git: Add..."
			],
			[
				"git ",
				"Git: Change Branch"
			],
			[
				"git st",
				"Git: Status"
			],
			[
				"git p",
				"Git: Pull"
			],
			[
				"git sta",
				"Git: Status"
			],
			[
				"git",
				"Git: Change Branch"
			],
			[
				"git checkout",
				"Git: Checkout Tag"
			],
			[
				"git pus",
				"Git: Push"
			],
			[
				"git A",
				"Git: Add..."
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"Tasks",
				"Tasks: New document"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"git: chec",
				"Git: Change Branch"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"Remove Package",
				"Package Control: Remove Package"
			]
		],
		"width": 540.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/WarKB/Desktop/PersonalProjects/LabirintJs"
	],
	"file_history":
	[
		"/C/Users/WarKB/Desktop/PersonalProjects/MySite/PersonalSite/style.css",
		"/C/Users/WarKB/Desktop/PersonalProjects/MySite/PersonalSite/index.html",
		"/C/Users/WarKB/YandexDisk/КНИГИ/js/script.js",
		"/C/Users/WarKB/Desktop/PersonalProjects/MySite/PersonalSite/paralax.js",
		"/C/Users/WarKB/Desktop/PersonalProjects/MySite/PersonalSite/js/main.js",
		"/C/Users/WarKB/YandexDisk/КНИГИ/js/index.html",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/landing/admin.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/landing/static/style.css",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/products/models.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/orders/models.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/webstore/urls.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/webstore/settings.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/landing/views.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/readme.txt",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/landing/forms.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/landing/templates/landing/landing.html",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/landing/models.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/tmp.js",
		"/home/kurbatovbn/YaDisk/DjangoProjects/tmp.html",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/landing/urls.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/landing/migrations/0001_initial.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/db.sqlite3",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/landing/templates/forms.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/templates/landing/landing.html",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/settings.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/templates/landing/__init__.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/templates/__init__.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/landing/__init__.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/mysite/pols/templates/admin/base_site.html",
		"/home/kurbatovbn/YaDisk/DjangoProjects/mysite/mysite/settings.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/mysite/pols/admin.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/mysite/pols/models.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/mysite/mysite/urls.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/mysite/pols/urls.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/mysite/pols/templates/pols/index.html",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests/aaa/aaa_check_timeout.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/mysite/pols/static/pols/style.css",
		"/home/kurbatovbn/YaDisk/DjangoProjects/mysite/pols/templates/pols/detail.html",
		"/home/kurbatovbn/YaDisk/DjangoProjects/mysite/pols/templates/pols/results.html",
		"/home/kurbatovbn/YaDisk/DjangoProjects/mysite/pols/tests.py",
		"/home/kurbatovbn/YaDisk/DjangoProjects/mysite/pols/views.py",
		"/home/kurbatovbn/git/ETPv3/getAllTestsInFolder.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/utilities/start/start_self_test.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.aaa.aaa_tacacs_plus 2018-02-22 14:20:03",
		"/home/kurbatovbn/YaDisk/DjangoProjects/mysite/pols/templates/__init__.py",
		"/home/kurbatovbn/YaDisk/OpenDev/questions.todo",
		"/home/kurbatovbn/YaDisk/OpenDev/answers.txt",
		"/home/kurbatovbn/tmp.py",
		"/home/kurbatovbn/YaDisk/OpenDev/RESTfulAPIDesigningGuidelines_en.txt",
		"/home/kurbatovbn/YaDisk/OpenDev/RESTfulAPIDesigningGuidelines_ru.txt",
		"/home/kurbatovbn/YaDisk/OpenDev/mock_ru.txt",
		"/home/kurbatovbn/YaDisk/OpenDev/mock_en.txt",
		"/home/kurbatovbn/git/ETPv3/getRunResult.py",
		"/home/kurbatovbn/workspace/usefullScripts/fillUpTrapLog.py",
		"/home/kurbatovbn/tmp/after100",
		"/home/kurbatovbn/tmp/before100",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/dual_start.py",
		"/home/kurbatovbn/tmp/after",
		"/home/kurbatovbn/tmp/before",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests/aaa/aaa_tacacs_auth.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests/logging/logging_wrong_message.py",
		"/home/kurbatovbn/Downloads/answers.txt",
		"/home/kurbatovbn/Downloads/questions.todo",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix/system/system_table_network.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix/system/system_cli.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-02-13 13:32:55",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/services/dhcp/dhcp_server.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-02-13 14:10:42",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/linux/system.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests/dhcp/dhcp_support.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/env/lib/python2.7/site-packages/trollius/base_events.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-02-13 13:15:12",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-02-13 11:27:39",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-02-13 11:13:34",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-02-13 10:59:12",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-02-13 11:20:47",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-02-13 11:25:50",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-02-12 10:21:59",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/utilities/ip.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/utilities/comparison.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-02-06 09:59:21",
		"/home/kurbatovbn/AutomatPython/archive/questions.todo",
		"/home/kurbatovbn/AutomatPython/archive/answers.txt",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-02-05 10:39:35",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-02-05 10:41:57",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-02-05 09:13:11",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-02-05 08:53:10",
		"/run/media/kurbatovbn/C0FC-B943/OpenDev/answers.txt",
		"/run/media/kurbatovbn/C0FC-B943/OpenDev/questions.todo",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-02-02 10:32:25",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests/pppoe/pppoe_add_checking_mode.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests/acl/acl_working_without.py",
		"/home/tftp/test.jpg",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests/lldp/lldp_med.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/packets/sniffer.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix/system/system_table_routes.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-01-30 15:51:28",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-01-30 14:49:43",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-01-30 11:01:22",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-01-30 10:23:27",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix/syslog/syslog_proxy_cli.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests/syslog/syslog_every_server.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.dhcp.dhcp_support 2018-01-30 09:35:34",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests/aaa/tacacs_single_session_authentication.py",
		"/home/kurbatovbn/aliases.sh",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests/acl/acl_base.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix/pppoe/pppoe_cli.py",
		"/home/kurbatovbn/sentence.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/packets/packet_pppoed.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/access/telnet.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix/system/system_config.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix/system/system_table_common_receiver.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests/system/system_cpu_protected.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.qos.qos_dscp_remarking 2018-01-25 16:47:06",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.qos.qos_trust_dot1p 2018-01-25 16:27:11",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.aaa.aaa_tacacs_plus 2018-01-25 16:22:27",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix/arp.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/linux/ping.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix/dhcp/dhcp_cli.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.tftp.tftp_flash_memory 2018-01-18 09:21:13",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.vlan.vlan_translation_ingress 2018-01-18 08:59:36",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/arp.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/log/tests.acl.acl_mgmt 2018-01-17 08:53:15",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests/qos/qos_trust_dot1p.py",
		"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests/qos/qos_dont_trust.py",
		"/run/media/kurbatovbn/C0FC-B943/Новая папка/Минимум для Java Junior/SQL and JDBC.txt",
		"/run/media/kurbatovbn/C0FC-B943/Новая папка/Минимум для Java Junior/JavaJunior.todo",
		"/run/media/kurbatovbn/C0FC-B943/Новая папка/Минимум для Java Junior/Spring.txt"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 119.0,
		"where_history":
		[
			"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/",
			"/home/kurbatovbn/YaDisk/DjangoProjects/webstore/landing",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/Pyt,/home/kurbatovbn/git/ETPv3/PythonTestProject/",
			"/home/kurbatovbn/git/ETPv3/Pyt,/home/kurbatovbn/git/ETPv3/PythonTestProject/utilities/start",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/linux",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/linux",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/files/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests/load",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal/bcm_phoenix",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/tests",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject/hal",
			"/home/kurbatovbn/git/ETPv3/PythonTestProject"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"goButtonClassName",
			"console",
			"path",
			"Path",
			"path",
			"Path",
			"path",
			"Path",
			"path",
			"Path",
			"path",
			"onEnter",
			"movesSortsFunction",
			"сче",
			"console",
			"shift",
			"length",
			"console",
			"distanceToA",
			");\n",
			"i",
			"<div id=\"bgContainer\">\n    <div class=\"card\" align=\"center\">\n        <div class=\"flex-container\">\n            <div class=\"cardcontain\">\n                <img src=\"img/roundAvatar.png\" align=\"middle\" width=\"150\" class=\"round\">\n                <h1>Курбатов Владимир\n                Николаевич</h1>\n                <div class=\"buttons\">\n                    <a href=\"https://vk.com/warkb\" class=\"button\">\n                        <img src=\"img/vkIcon.png\" width=\"70\">\n                    </a>\n                    <a href=\"https://github.com/warkb\" class=\"button\">\n                        <img src=\"img/githubIcon.png\" width=\"70\">\n                    </a>\n                    <a href=\"https://saratov.hh.ru/resume/51196305ff024c56900039ed1f617535415071\" class=\"button\">\n                        <img src=\"img/hhIcon.png\" width=\"70\">\n                    </a>\n                </div>\n            </div>\n        </div>\n    </div>    \n</div>",
			"order",
			"Subscribers",
			"pols",
			"STATICFILES_DIRS",
			"__CheckNetworkSettingsOnSwitch",
			"echo",
			"~$",
			"$",
			"[править | править код]",
			"#",
			"5407",
			"[\\d+\\d]",
			"\\d",
			"#",
			"killall telnet",
			"#",
			"DhcpServerService",
			"Enable",
			"forwarding",
			"\n",
			"eth0",
			")\n",
			"print",
			"vot",
			"networkTable",
			"network",
			"Проверим, что появился  Ipv6 адресс из подсети,",
			"network ipv6 address autoconfig",
			"CheckWorkingWihoutAcl_13521_1",
			"print",
			"CheckSendInventoryTLV_12762_1",
			"GetIpv4AndGwWithStaticGwPart2_12998_5",
			"print",
			"Проверяем, что в таблице маршрутизации на коммутаторе дефолтный маршрут только один и он для интерфейса additional",
			"NetworkRoutesTable",
			"mask",
			"DRY",
			"\n",
			"/* */",
			"ipCompAddres1",
			"pyshark",
			"logging cli-command",
			"logging host",
			"logging syslog facility",
			"logging syslog",
			"show",
			"con",
			"pppoe untrust vendor-tag drop",
			"pppoe ",
			"pppoe untrust ",
			"pppoe untrust vendor-tag ",
			"pppoe untrust vendor-tag forward",
			"HexPacket",
			"hex",
			"pppoe trust",
			"pppoe frmtstr",
			"|",
			"Сц",
			"задачи",
			"ProtectionAgainstDHCPv4ClientPackets_5648_9_10",
			"CFE> ",
			"print",
			"ip dhcp snooping",
			"show ip arp inspection",
			"show ip arp inspection ",
			"ip arp inspection vlan",
			"ip arp inspection",
			"arp access-list",
			"QoSGlobalSettings_5894_1",
			"☐",
			")\n",
			"Counters comparison #2",
			"Counters comparison #1",
			"QosTrustTable",
			"__modeToStr",
			"ArpInspectionSnmpBase_5410_7_2",
			"transmit-mgmt",
			"'|||'",
			"getoutput",
			"expected string without null bytes",
			"hex",
			"snmp",
			"x",
			"snmp.Send",
			"True",
			"EnableLoggingPermanent",
			"qos_trust_dot1p",
			"VlanBasedAnd8021p_5894_4",
			"[а-я]+[ ,]+",
			"QoSRemarkingAnd8021p_5894_5",
			"classofservice trust dot1p",
			"\\w+\\.\\w+\\.\\w+",
			"\\w.\\w.\\w",
			"\\w+.+\\w+.+\\w",
			"pb",
			"SetDscp",
			"classofservice trust",
			"']\n",
			"vlan",
			"vlan ",
			"vlan",
			"ERROR",
			"traffic-shape",
			"CheckUntrust_13331_1",
			"QosTrustTable",
			"classofservice dot1p-mapping"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Subscriber",
			"",
			"DhcpServerServiceV1dot0",
			"qosTrustTable",
			"__ModeToStr",
			"self.vlan",
			"",
			"аутентификация",
			"tests/dhcp/dhcp_support/",
			"    ",
			"|Написать",
			"self.com",
			"self.dhcpCli",
			"self.sysCli",
			"    ",
			"snif2",
			"    ",
			"__FormIgmpPack",
			"    "
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 990,
						"regions":
						{
						},
						"selection":
						[
							[
								698,
								698
							]
						],
						"settings":
						{
							"auto_complete": false,
							"auto_name": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										706,
										707
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/tag.png",
										"region.orangish"
									]
								},
								"open":
								{
									"1":
									[
										596,
										597
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										850,
										853
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/tag.png",
										"region.orangish"
									]
								},
								"open":
								{
									"1":
									[
										664,
										667
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 185.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "style.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1158,
						"regions":
						{
						},
						"selection":
						[
							[
								8,
								8
							]
						],
						"settings":
						{
							"auto_name": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										1080,
										1081
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										823,
										824
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										96,
										97
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										5,
										6
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"git_gutter_is_enabled": true,
							"syntax": "Packages/CSS/CSS.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "script.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7119,
						"regions":
						{
						},
						"selection":
						[
							[
								1223,
								1370
							]
						],
						"settings":
						{
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										1480,
										1481
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1148,
										1149
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1432,
										1433
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1148,
										1149
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 359.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "tmp.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 481,
						"regions":
						{
						},
						"selection":
						[
							[
								281,
								303
							]
						],
						"settings":
						{
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										307,
										308
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										107,
										108
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										328,
										329
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										107,
										108
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "aasteric.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 10162,
						"regions":
						{
						},
						"selection":
						[
							[
								151,
								151
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										885,
										886
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										873,
										874
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										150,
										151
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/single_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										148,
										149
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 132.0
	},
	"output.exec":
	{
		"height": 357.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 292.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 100.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "labirintJs.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"lan",
				"webstore/landing/templates/landing/landing.html"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\WarKB\\Documents\\MyLife\\MyLife.sublime-project"
			],
			[
				"d",
				"~YaDisk/DjangoProjects/DjangoProjects.sublime-project"
			],
			[
				"e",
				"~git/ETPv3/PythonTestProject/ETPv3.sublime-project"
			],
			[
				"E",
				"~git/ETPv3/PythonTestProject/ETPv3.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 233.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 1
	}
}
